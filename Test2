import numpy as np
import matplotlib.pyplot as plt
from itertools import product
import time


class PiecewiseChebyshev:
    """
    Piecewise Chebyshev interpolation for functions with critical points.
    
    This class divides the domain at critical points and applies separate
    Chebyshev interpolations to each segment, providing high accuracy for
    functions with non-differentiable points or high convexity.
    """
    
    def __init__(self, domains, degrees, critical_points=None):
        """
        Initialize the piecewise Chebyshev interpolation.
        
        Parameters:
        -----------
        domains : list of tuples
            List of (min, max) tuples defining the domain in each dimension.
        degrees : list of int or list of lists
            Degrees for Chebyshev polynomials in each dimension and segment.
            If a single int or list of ints, the same degree is used for all segments.
            If a list of lists, each inner list specifies the degrees for segments in that dimension.
        critical_points : list or None
            List of critical points for each dimension.
            For each dimension, provide a list of critical points that divide the domain.
            Critical points must be strictly inside the domain bounds.
        """
        self.domains = domains
        self.dims = len(domains)
        
        # Process critical points to create sub-domains
        if critical_points is None:
            self.critical_points = [[] for _ in range(self.dims)]
            self.segments = [(domain,) for domain in domains]  # One segment per dimension
        elif not isinstance(critical_points[0], (list, tuple, np.ndarray)):
            # Single list of critical points, assume it's for first dimension
            self.critical_points = [sorted(critical_points)] + [[] for _ in range(self.dims-1)]
        else:
            self.critical_points = [sorted(points) for points in critical_points]
        
        # Check critical points are within domains
        for dim, (domain, points) in enumerate(zip(domains, self.critical_points)):
            for point in points:
                if not (domain[0] < point < domain[1]):
                    raise ValueError(f"Critical point {point} in dimension {dim} is not within domain {domain}")
        
        # Create segments for each dimension
        self.segments = []
        for dim, (domain, points) in enumerate(zip(domains, self.critical_points)):
            a, b = domain
            if not points:
                self.segments.append([(a, b)])
            else:
                # Add the start point, all segments, and the end point
                segment_points = [a] + points + [b]
                self.segments.append([(segment_points[i], segment_points[i+1]) 
                                      for i in range(len(segment_points)-1)])
        
        # Process degrees
        if isinstance(degrees, int):
            # Single degree for all dimensions and segments
            self.degrees = [[degrees for _ in segment_list] for segment_list in self.segments]
        elif isinstance(degrees[0], int):
            # One degree per dimension, same for all segments in that dimension
            self.degrees = [[deg for _ in segment_list] for deg, segment_list in zip(degrees, self.segments)]
        else:
            # List of lists: specific degree for each segment in each dimension
            # Check lengths match
            for dim, (deg_list, segment_list) in enumerate(zip(degrees, self.segments)):
                if len(deg_list) != len(segment_list):
                    raise ValueError(f"Number of degrees ({len(deg_list)}) doesn't match number of segments ({len(segment_list)}) for dimension {dim}")
            self.degrees = degrees
        
        # Create interpolation objects for each segment combination
        self._create_segment_interpolators()
        
        # Cache for Chebyshev polynomials
        self._poly_cache = {}
        
        # Interpolation tensors
        self.P = {}  # Dictionary of tensors P for each segment
        self.C = {}  # Dictionary of tensors C for each segment
    
    def _create_segment_interpolators(self):
        """Create segment interpolators for all segment combinations"""
        # For 1D case, this is simple
        if self.dims == 1:
            self.segment_interpolators = []
            for seg_idx, (segment, degree) in enumerate(zip(self.segments[0], self.degrees[0])):
                interp = SegmentChebyshev(segment, degree)
                self.segment_interpolators.append((interp, seg_idx))
            return
        
        # For multi-dimensional case, create all combinations of segments
        segment_indices = [range(len(segments)) for segments in self.segments]
        self.segment_interpolators = []
        
        for seg_indices in product(*segment_indices):
            # Create domains for this segment combination
            segment_domains = [self.segments[dim][idx] for dim, idx in enumerate(seg_indices)]
            segment_degrees = [self.degrees[dim][idx] for dim, idx in enumerate(seg_indices)]
            
            # Create interpolator for this segment
            interp = SegmentChebyshev(segment_domains, segment_degrees)
            self.segment_interpolators.append((interp, seg_indices))
    
    def _find_segment(self, point):
        """Find which segment a point belongs to"""
        if isinstance(point, (int, float)):
            point = [point]  # Convert to list for 1D case
        
        segment_indices = []
        for dim, p in enumerate(point):
            # Find segment in this dimension
            found = False
            for i, segment in enumerate(self.segments[dim]):
                if segment[0] <= p <= segment[1]:
                    segment_indices.append(i)
                    found = True
                    break
            
            if not found:
                raise ValueError(f"Point {p} in dimension {dim} is outside the domain")
        
        if self.dims == 1:
            return segment_indices[0]
        else:
            return tuple(segment_indices)
    
    def construct_tensor_P(self, ref_method, subset_indices=None):
        """
        Construct tensor P containing values at Chebyshev grid points for each segment.
        
        Parameters:
        -----------
        ref_method : callable
            Reference method that takes a point and returns a value.
        subset_indices : dict or None
            Dictionary mapping segment indices to list of indices where to evaluate 
            the reference method. If None, evaluate at all Chebyshev nodes.
            
        Returns:
        --------
        dict
            Dictionary mapping segment indices to tensors P with values at Chebyshev nodes.
        """
        print("Offline Phase - Step 2: Computing reference values at Chebyshev nodes for each segment")
        start_time = time.time()
        
        # Process each segment
        for interp, seg_idx in self.segment_interpolators:
            if subset_indices is not None and seg_idx in subset_indices:
                subset = subset_indices[seg_idx]
            else:
                subset = None
            
            # Construct P for this segment
            print(f"Processing segment {seg_idx}...")
            interp.construct_tensor_P(ref_method, subset)
        
        # Collect all P tensors
        self.P = {seg_idx: interp.P for interp, seg_idx in self.segment_interpolators}
        
        elapsed = time.time() - start_time
        print(f"Completed in {elapsed:.2f} seconds")
        
        return self.P
    
    def construct_tensor_C(self):
        """
        Construct tensor C containing Chebyshev coefficients for each segment.
        
        Returns:
        --------
        dict
            Dictionary mapping segment indices to tensors C with Chebyshev coefficients.
        """
        print("Offline Phase - Step 4: Computing Chebyshev coefficients for each segment")
        start_time = time.time()
        
        # Process each segment
        for interp, seg_idx in self.segment_interpolators:
            # Construct C for this segment
            interp.construct_tensor_C()
        
        # Collect all C tensors
        self.C = {seg_idx: interp.C for interp, seg_idx in self.segment_interpolators}
        
        elapsed = time.time() - start_time
        print(f"Completed in {elapsed:.2f} seconds")
        
        return self.C
    
    def evaluate_interpolation(self, point):
        """
        Evaluate the piecewise Chebyshev interpolation at a point.
        
        Parameters:
        -----------
        point : tuple or float
            Point in parameter space at which to evaluate
            
        Returns:
        --------
        float
            Interpolated value
        """
        # Find which segment the point belongs to
        segment_idx = self._find_segment(point)
        
        # Find the corresponding interpolator
        for interp, seg_idx in self.segment_interpolators:
            if seg_idx == segment_idx:
                return interp.evaluate_interpolation(point)
        
        raise ValueError(f"No interpolator found for segment {segment_idx}")
    
    def evaluate_batch(self, points):
        """
        Evaluate the piecewise Chebyshev interpolation at multiple points.
        
        Parameters:
        -----------
        points : list of tuples or array
            Points in parameter space at which to evaluate
            
        Returns:
        --------
        numpy.ndarray
            Interpolated values
        """
        # Handle different input formats
        if self.dims == 1 and isinstance(points[0], (int, float)):
            points = [(p,) for p in points]
        
        # Process multiple points
        results = np.zeros(len(points))
        
        # Group points by segment to avoid switching interpolators
        segment_points = {}
        segment_indices = {}
        
        for i, point in enumerate(points):
            segment_idx = self._find_segment(point)
            if segment_idx not in segment_points:
                segment_points[segment_idx] = []
                segment_indices[segment_idx] = []
            segment_points[segment_idx].append(point)
            segment_indices[segment_idx].append(i)
        
        # Evaluate points in each segment
        for segment_idx, points_list in segment_points.items():
            # Find the corresponding interpolator
            for interp, seg_idx in self.segment_interpolators:
                if seg_idx == segment_idx:
                    # Evaluate points in this segment
                    values = interp.evaluate_batch(points_list)
                    # Store results in correct positions
                    for j, value in enumerate(values):
                        results[segment_indices[segment_idx][j]] = value
                    break
        
        return results
    
    def run_offline_phase(self, ref_method, subset_size=None):
        """
        Run the complete offline phase for all segments.
        
        Parameters:
        -----------
        ref_method : callable
            Reference method that takes a point and returns a value.
        subset_size : int or None
            If given, use random subset of this size for each segment.
            
        Returns:
        --------
        dict
            Dictionary mapping segment indices to tensors C with Chebyshev coefficients.
        """
        print("=== OFFLINE PHASE ===")
        overall_start = time.time()
        
        # Generate subset indices if specified
        subset_indices = None
        if subset_size is not None:
            subset_indices = {}
            for interp, seg_idx in self.segment_interpolators:
                # Generate all possible indices for this segment
                if self.dims == 1:
                    n = interp.degrees + 1
                    all_indices = list(range(n))
                else:
                    all_indices = list(product(*[range(d + 1) for d in interp.degrees]))
                
                total_points = len(all_indices)
                
                if subset_size >= total_points:
                    subset = all_indices
                else:
                    # Randomly sample indices
                    np.random.seed(42 + hash(str(seg_idx)))
                    sample_idx = np.random.choice(total_points, size=subset_size, replace=False)
                    subset = [all_indices[i] for i in sample_idx]
                
                subset_indices[seg_idx] = subset
        
        # Step 2: Construct tensor P for each segment
        self.P = self.construct_tensor_P(ref_method, subset_indices)
        
        # Step 4: Construct tensor C for each segment
        self.C = self.construct_tensor_C()
        
        overall_elapsed = time.time() - overall_start
        print(f"Offline phase completed in {overall_elapsed:.2f} seconds")
        
        return self.C
    
    def run_online_phase(self, points):
        """
        Run the online phase for one or more points.
        
        Parameters:
        -----------
        points : tuple or list of tuples
            Point(s) in parameter space at which to evaluate
            
        Returns:
        --------
        float or numpy.ndarray
            Interpolated value(s)
        """
        print("=== ONLINE PHASE ===")
        
        # Handle both single point and multiple points
        if isinstance(points, tuple) or (isinstance(points, (int, float)) and self.dims == 1):
            # Single point
            return self.evaluate_interpolation(points)
        else:
            # Multiple points
            return self.evaluate_batch(points)
    
    def run_algorithm(self, ref_method, evaluation_points, subset_size=None):
        """
        Run the complete algorithm (offline + online phases).
        
        Parameters:
        -----------
        ref_method : callable
            Reference method that takes a point and returns a value.
        evaluation_points : tuple or list of tuples
            Point(s) in parameter space at which to evaluate
        subset_size : int or None
            If given, use random subset of this size for each segment.
            
        Returns:
        --------
        float or numpy.ndarray
            Interpolated value(s)
        """
        # Run offline phase
        self.run_offline_phase(ref_method, subset_size)
        
        # Run online phase
        return self.run_online_phase(evaluation_points)


class SegmentChebyshev:
    """
    Chebyshev interpolation for a single segment.
    This is a simpler version of the ChebyshevInterpolation class 
    that works on a single segment of the domain.
    """
    
    def __init__(self, domain, degree):
        """
        Initialize the Chebyshev interpolation for a segment.
        
        Parameters:
        -----------
        domain : tuple or list of tuples
            Domain bounds as (min, max) or list of (min, max) for multi-dimensional case.
        degree : int or list of int
            Degree of Chebyshev polynomial for each dimension.
        """
        # Standardize inputs for 1D and multi-dimensional cases
        if isinstance(domain[0], (int, float)):
            # 1D case
            self.domains = [domain]
            self.degrees = [degree]
            self.dims = 1
        else:
            # Multi-dimensional case
            self.domains = domain
            self.degrees = degree if isinstance(degree, list) else [degree] * len(domain)
            self.dims = len(domain)
        
        # Generate Chebyshev points for each dimension
        self.points = []
        self.cheb_points = []
        
        for i, (a, b) in enumerate(self.domains):
            N = self.degrees[i]
            # Chebyshev nodes in [-1, 1]
            k = np.arange(N+1)
            z = np.cos(np.pi * k / N)
            
            # Map to domain [a, b]
            x = 0.5 * (b - a) * (z + 1) + a
            
            self.cheb_points.append(z)  # Store points in [-1, 1]
            self.points.append(x)       # Store mapped points
        
        # Tensors for coefficients and values
        self.P = None  # Tensor of values at Chebyshev nodes
        self.C = None  # Tensor of Chebyshev coefficients
        
        # Cache for Chebyshev polynomials
        self._poly_cache = {}
    
    def _chebyshev_polynomial(self, n, x):
        """
        Evaluate Chebyshev polynomial T_n(x).
        
        Parameters:
        -----------
        n : int
            Degree of the polynomial.
        x : float
            Point at which to evaluate the polynomial, in [-1, 1].
            
        Returns:
        --------
        float
            Value of T_n(x).
        """
        # Create a hashable key for the cache
        key = (n, float(x))
        
        # Check if result is in cache
        if key in self._poly_cache:
            return self._poly_cache[key]
        
        # Calculate the result
        if n == 0:
            result = 1.0
        elif n == 1:
            result = float(x)
        else:
            # Use recurrence relation: T_n(x) = 2x*T_{n-1}(x) - T_{n-2}(x)
            Tnm2 = 1.0  # T_0(x)
            Tnm1 = float(x)  # T_1(x)
            
            for i in range(2, n+1):
                result = 2.0 * x * Tnm1 - Tnm2
                Tnm2 = Tnm1
                Tnm1 = result
        
        # Store in cache (limit cache size)
        if len(self._poly_cache) < 10000:
            self._poly_cache[key] = result
            
        return result
    
    def construct_tensor_P(self, ref_method, subset_indices=None):
        """
        Construct tensor P containing values at Chebyshev grid points.
        
        Parameters:
        -----------
        ref_method : callable
            Reference method that takes a point and returns a value.
        subset_indices : list or None
            List of indices where to evaluate the reference method. If None,
            evaluate at all Chebyshev nodes.
            
        Returns:
        --------
        numpy.ndarray
            Tensor P with values at Chebyshev nodes.
        """
        # Initialize tensor P
        P_shape = tuple(d + 1 for d in self.degrees)
        P = np.zeros(P_shape)
        
        # If no subset provided, use all indices
        if subset_indices is None:
            # Generate all indices
            all_indices = list(product(*[range(d + 1) for d in self.degrees]))
            subset_indices = all_indices
        
        total_points = len(subset_indices)
        
        # Evaluate at each point in the subset
        for i, indices in enumerate(subset_indices):
            # Construct parameter point
            if self.dims == 1:
                param_point = self.points[0][indices]
            else:
                param_point = tuple(self.points[dim][idx] for dim, idx in enumerate(indices))
            
            # Evaluate reference method
            value = ref_method(param_point)
            
            # Store in tensor P
            P[indices] = value
        
        self.P = P
        return P
    
    def _construct_basis_matrix(self, n):
        """
        Construct the Chebyshev basis matrix F_n as described in equation (11).
        
        Parameters:
        -----------
        n : int
            Interpolation order (degree of Chebyshev polynomial)
        
        Returns:
        --------
        np.ndarray
            Chebyshev basis matrix F_n
        """
        F_n = np.zeros((n+1, n+1))
        
        for j in range(n+1):
            for k in range(n+1):
                # Factor for all terms
                factor = 2.0 / n
                
                # Addit
